# Description: This script is used to build the Docker image and run the main sandboxed script.
# The script takes the arguments provided by the user and passes them to Gitleaks execution inside the container.
# The script also handles the cleanup of the .json files generated by previous reports.

# Usage: python3 sandbox.py <gitleaks-arguments> | Example: python3 sandbox.py --verbose detect --no-git
# The script also handles the Ctrl + C signal to clean up the .json files before exiting.
# Author: Tal.M

import os
import sys
import subprocess
from time import sleep
import glob
import signal

# Signal handler Ctrl + C for cleaning up the .json files
def signal_handler(sig, frame):
    clean_up()
    print("\n[!] Exiting ...")
    sys.exit(0)

# Remove old .json files
def clean_up():
    try:
        # Remove files matching the pattern report_*.json
        files_to_remove = glob.glob("report_*.json")
        for file in files_to_remove:
            os.remove(file)

    except FileNotFoundError:
        pass

def validate_docker():
    if subprocess.run(["docker", "--version"], capture_output=True).returncode != 0:
        sys.exit("[!] Docker is not installed. Please install Docker to use this script.")

# Build the Docker image using the specified Dockerfile.
def build_docker_image(verbose):
    # #Check if the docker image already exists
    # docker_images = subprocess.run(["docker", "images", "-q", "gitleaks-pipeline"], stdout=subprocess.PIPE)
    # if docker_images.stdout:
    #     print("[!] Docker image already exists!")
    #     return
    print("Building Docker image ...")
    sleep(1)
    command = ["docker", "build", "-t", "gitleaks-pipeline", "-f", "src/Dockerfile", "."]
    try:
        if verbose:
            # Print logs to the console
            subprocess.run(command, check=True)
        else:
            # Suppress logs
            subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("[!] Docker image built successfully!")
    except subprocess.CalledProcessError as e:
        print("[-] Docker image build failed!")
        print(f"Details: {e}")

# Run the main sandboxing script
def run_sandbox():
    #Fetch current location
    current_location = os.getcwd()
    command = ["docker", "run", "--rm", "-v", f"{current_location}:/code", "gitleaks-pipeline"] + sys.argv[1:]
    try:
        # Run the sandboxed script
        subprocess.run(command, check=True)
    except subprocess.CalledProcessError as e:
        #Avoid printing if the error code is 4
        if e.returncode != 4:
            print(f"[-] Error running the sandboxed script! Command: {' '.join(command)}")
        


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    # Clean up old gitleaks .json files
    clean_up()
    # Validate if Docker is installed
    validate_docker()
    # Check is user passed any arguments
    if len(sys.argv) < 2:
        print("Usage: python3 sandbox.py <gitleaks-args> | Example: python3 sandbox.py --verbose detect --no-git")
        sys.exit(1)
    # if verbose flag is provided, pipe the output to stdout
    if "--verbose" in sys.argv or "--v" in sys.argv:
        build_docker_image(True)
    else:
        build_docker_image(False)
    # Run the main sandboxed script
    run_sandbox()